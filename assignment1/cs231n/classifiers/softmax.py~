import numpy as np
from random import shuffle

def softmax_loss_naive(W, X, y, reg):
  """
  Softmax loss function, naive implementation (with loops)

  Inputs have dimension D, there are C classes, and we operate on minibatches
  of N examples.

  Inputs:
  - W: A numpy array of shape (D, C) containing weights.
  - X: A numpy array of shape (N, D) containing a minibatch of data.
  - y: A numpy array of shape (N ,) containing training labels; y[i] = c means
    that X[i] has label c, where 0 <= c < C.
  - reg: (float) regularization strength

  Returns a tuple of:
  - loss as single float
  - gradient with respect to weights W; an array of same shape as W
  """
  # Initialize the loss and gradient to zero.
  loss = 0.0
  dW = np.zeros_like(W)
  C = W.shape[1]
  N = X.shape[0]
  D = X.shape[1]
  num = np.zeros((C,1))
  T = np.zeros_like(num)
  #############################################################################
  # TODO: Compute the softmax loss and its gradient using explicit loops.     #
  # Store the loss in loss and the gradient in dW. If you are not careful     #
  # here, it is easy to run into numeric instability. Don't forget the        #
  # regularization!                                                           #
  #############################################################################
  for i in range(N):
    num = np.dot(X[i],W) 
    num = np.exp(num - np.max(num))
    den = sum(num)
    loss -= np.log(num[y[i]]/den)
    for j in range(C):
      p = num[j]/den
      dW[:,j]-= X[i] * ((y[i] == j) -p)
  loss /= N
  dW /= N
  dW += reg * W;
  loss += 0.5 * reg * np.sum(W**2)  
  
  
    
  #############################################################################
  #                          END OF YOUR CODE                                 #
  #############################################################################

  return loss, dW


def softmax_loss_vectorized(W, X, y, reg):
  """
  Softmax loss function, vectorized version.

  Inputs and outputs are the same as softmax_loss_naive.
  """
  # Initialize the loss and gradient to zero.
  loss = 0.0
  dW = np.zeros_like(W)
  numTrain = X.shape[0]
  dWTemp = np.zeros((numTrain,W.shape[1]))
  dWTemp[range(numTrain),y] = 1
  #############################################################################
  # TODO: Compute the softmax loss and its gradient using no explicit loops.  #
  # Store the loss in loss and the gradient in dW. If you are not careful     #
  # here, it is easy to run into numeric instability. Don't forget the        #
  # regularization!                                                           #
  #############################################################################
  scores = np.dot(X,W)
  scores -= np.max(scores,axis=1,keepdims=True)
  scores -= np.exp(scores)
  den = scores.sum(axis=1,keepdims=True)
  scores = scores/den
  scores_log = -np.log(scores)
  loss = (np.sum(scores_log[range(numTrain),y]))/numTrain
  loss += 0.5 * reg * np.sum(W**2)
  temp = -dWTemp + scores
  dW = np.dot(X.T,temp)
  dW /= numTrain
  dW += reg * W 
  #############################################################################
  #                          END OF YOUR CODE                                 #
  #############################################################################

  return loss, dW

